#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∫–ª–µ–π–∫–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç
"""

import os
import re
import cv2
import numpy as np
import argparse
from tqdm import tqdm

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EARTH_RADIUS = 6371000  # –º–µ—Ç—Ä–æ–≤


def parse_filename(filename):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    pattern = r"area_(\d+)_([\d.]+)_([\d.]+)_([\d.]+)_([\d.]+)_([\d.]+)_([\d.]+)_([\d.]+)_([\d.]+)_([-\d.]+)\.png"
    match = re.match(pattern, filename)

    if not match:
        return None

    frame_id = int(match.group(1))
    azimuth = float(match.group(11))

    corners = np.array([
        [float(match.group(2)), float(match.group(3))],
        [float(match.group(4)), float(match.group(5))],
        [float(match.group(6)), float(match.group(7))],
        [float(match.group(8)), float(match.group(9))]
    ])

    return frame_id, corners, azimuth


def latlon_to_mercator(lat, lon, ref_lat):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–µ—Ç—Ä—ã"""
    x = np.radians(lon) * EARTH_RADIUS * np.cos(np.radians(ref_lat))
    y = np.radians(lat) * EARTH_RADIUS
    return x, y


def calculate_transform_params(fragments):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    all_coords = np.vstack([corners for _, corners, _ in fragments])
    mean_lat = np.mean(all_coords[:, 0])

    x_coords, y_coords = [], []
    for _, corners, _ in fragments:
        for lat, lon in corners:
            x, y = latlon_to_mercator(lat, lon, mean_lat)
            x_coords.append(x)
            y_coords.append(y)

    return {
        'min_x': min(x_coords),
        'max_x': max(x_coords),
        'min_y': min(y_coords),
        'max_y': max(y_coords),
        'ref_lat': mean_lat
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–°–∫–ª–µ–π–∫–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    parser.add_argument('-i', '--input', default='data/fragments',
                        help='–ü–∞–ø–∫–∞ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –∫–∞—Ä—Ç')
    parser.add_argument('-o', '--output', default='data/output/map.png',
                        help='–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    parser.add_argument('-r', '--resolution', type=float, default=0.1,
                        help='–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –Ω–∞ –º–µ—Ç—Ä')

    args = parser.parse_args()

    print("""
    #############################################
    #      –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∫–ª–µ–π–∫–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç     #
    #        (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–ª–∞–≥–∏–Ω–æ–≤)    #
    #############################################
    """)

    print(f"‚Ä¢ –ü–∞–ø–∫–∞ —Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏: {args.input}")
    print(f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {args.output}")
    print(f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {args.resolution} –ø–∏–∫—Å–µ–ª–µ–π/–º–µ—Ç—Ä")

    # –°–±–æ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    fragments = []
    print("\nüîç –ü–æ–∏—Å–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç...")
    for fname in os.listdir(args.input):
        if fname.endswith('.png'):
            data = parse_filename(fname)
            if data:
                fragments.append((fname, *data))

    if not fragments:
        print("‚ùå –û—à–∏–±–∫–∞: –§—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–¥—Ä–∞
    fragments.sort(key=lambda x: x[1])
    print(f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(fragments)}")

    # –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print("üßÆ –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
    tp = calculate_transform_params(fragments)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
    width_m = tp['max_x'] - tp['min_x']
    height_m = tp['max_y'] - tp['min_y']
    width_px = int(width_m * args.resolution) + 1000
    height_px = int(height_m * args.resolution) + 1000
    canvas = np.zeros((height_px, width_px, 4), dtype=np.uint8)

    print(f"‚Ä¢ –†–∞–∑–º–µ—Ä —Ö–æ–ª—Å—Ç–∞: {width_px} x {height_px} –ø–∏–∫—Å–µ–ª–µ–π")
    print("\nüöÄ –ù–∞—á–∞–ª–æ —Å–∫–ª–µ–π–∫–∏...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
    for fname, _, corners, azimuth in tqdm(fragments, desc="–°–∫–ª–µ–π–∫–∞"):
        img_path = os.path.join(args.input, fname)
        img = cv2.imread(img_path, cv2.IMREAD_UNCHANGED)

        if img is None:
            continue

        if img.shape[2] == 3:
            img = cv2.cvtColor(img, cv2.COLOR_BGR2BGRA)

        # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ –∞–∑–∏–º—É—Ç—É
        if abs(azimuth) > 0.1:
            center = (img.shape[1] // 2, img.shape[0] // 2)
            M = cv2.getRotationMatrix2D(center, azimuth, 1.0)
            img = cv2.warpAffine(img, M, (img.shape[1], img.shape[0]),
                                 borderMode=cv2.BORDER_TRANSPARENT)

        # –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
        merc_corners = []
        for lat, lon in corners:
            x, y = latlon_to_mercator(lat, lon, tp['ref_lat'])
            px = int((x - tp['min_x']) * args.resolution)
            py = int((tp['max_y'] - y) * args.resolution)
            merc_corners.append([px, py])

        src_points = np.array([[0, 0], [img.shape[1], 0],
                               [img.shape[1], img.shape[0]],
                               [0, img.shape[0]]], dtype=np.float32)

        dst_points = np.array(merc_corners, dtype=np.float32)
        M = cv2.getPerspectiveTransform(src_points, dst_points)
        warped = cv2.warpPerspective(img, M, (canvas.shape[1], canvas.shape[0]),
                                     flags=cv2.INTER_LANCZOS4,
                                     borderMode=cv2.BORDER_TRANSPARENT)

        # –°–º–µ—à–∏–≤–∞–Ω–∏–µ
        alpha_f = warped[:, :, 3] / 255.0
        alpha_c = canvas[:, :, 3] / 255.0
        combined_alpha = alpha_f + alpha_c * (1 - alpha_f)

        for c in range(3):
            canvas[:, :, c] = (warped[:, :, c] * alpha_f) + \
                              (canvas[:, :, c] * alpha_c * (1 - alpha_f))
        canvas[:, :, 3] = combined_alpha * 255

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    os.makedirs(os.path.dirname(args.output), exist_ok=True)
    cv2.imwrite(args.output, canvas)

    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {args.output}")
    print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {canvas.shape[1]}x{canvas.shape[0]} –ø–∏–∫—Å–µ–ª–µ–π")


if __name__ == "__main__":
    main()